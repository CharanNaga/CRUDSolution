@model IEnumerable<PersonResponse>
@{
    ViewBag.Title = "Persons";
}
@* ctrl + k, ctrl + d => shortcut for proper formatting the document
    ctrl + k, ctrl + f => shortcut for selective formatting code.
*@

@functions{
    async Task RenderGridColumnHeader(string columnName, string displayName)
    {
        @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData)
        {
            {"ColumnName", columnName},
            {"DisplayName", displayName}
        })
    }
}

<form asp-controller="Persons" asp-action="Index" method="get"> 
    <h1>Persons</h1>
    <a asp-controller="Persons" asp-action="Create">Create Person</a>
    <a asp-controller="Persons" asp-action="PersonsPDF" class="ml">Download as PDF</a>
    <a asp-controller="Persons" asp-action="PersonsCSV" class="ml">Download as CSV</a>
    <a asp-controller="Persons" asp-action="PersonsExcel" class="ml">Download as Excel</a>
    <div class="box flex">
        <div class="flex-1">
            <select class="form-input" name="searchBy">
                @foreach (var field in ViewBag.SearchFields)
                {
                    if(field.Key == ViewBag.CurrentSearchBy)
                    {
                        <option value="@field.Key" selected= "selected">@field.Value</option>
                    }
                    else
                    {
                        <option value="@field.Key">@field.Value</option>
                    }
                    @* Eg: searchBy=PersonName&searchString=abc (Query string)
                        With Form, along with GET request we send the data to the controller in form-urlencoded format
                        which can be received in controller through model binding. 
                        So, we'll specify searchBy and searchString (properties from name property in option & input tags) in controller.
                    *@
                }
            </select>
        </div>

        <div class="flex-1">
            <input type="search" id="Search" class="form-input" placeholder="Search" name="searchString" value="@ViewBag.CurrentSearchString"/>
        </div>

        <div class="flex-1">
            <button class="button button-blue-back">Search</button>
            <a asp-controller="Persons" asp-action="Index" class="link-hover">Clear all</a>
        </div>
    </div>

    <table class="table w-100 mt">
        <thead>
            <tr>
                @*@await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.PersonName)},
                    {"DisplayName","Person Name"}
                })

                @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.Email)},
                    {"DisplayName","Email"}
                })

                @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.DateOfBirth)},
                    {"DisplayName","DOB"}
                })
                
                @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.Age)},
                    {"DisplayName","Age"}
                })
                
                @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.Gender)},
                    {"DisplayName","Gender"}
                })
                
                @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.Country)},
                    {"DisplayName","Country"}
                })
                
                @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.Address)},
                    {"DisplayName","Address"}
                })
                
                @await Html.PartialAsync("_GridColumnHeader",new ViewDataDictionary(ViewData){
                    {"ColumnName",nameof(PersonResponse.ReceiveNewsLetters)},
                    {"DisplayName","Receive Newsletters"}
                })*@
                @{
                    await RenderGridColumnHeader(nameof(PersonResponse.PersonName), "Person Name");
                    await RenderGridColumnHeader(nameof(PersonResponse.Email), "Email");
                    await RenderGridColumnHeader(nameof(PersonResponse.DateOfBirth), "DOB");
                    await RenderGridColumnHeader(nameof(PersonResponse.Age), "Age");
                    await RenderGridColumnHeader(nameof(PersonResponse.Gender), "Gender");
                    await RenderGridColumnHeader(nameof(PersonResponse.Country), "Country");
                    await RenderGridColumnHeader(nameof(PersonResponse.Address), "Address");
                    await RenderGridColumnHeader(nameof(PersonResponse.ReceiveNewsLetters), "Receive Newsletters");
                }
                <th>Options</th>
            </tr>
        </thead>

        <tbody>
            @foreach (PersonResponse person in Model)
            {
                <tr>
                    <td style="width:15%">@person.PersonName</td>
                    <td style="width:20%">@person.Email</td>
                    <td style="width:13%">@person.DateOfBirth?.ToString("dd MMM yyyy")</td>
                    <td style="width:9%">@person.Age</td>
                    <td style="width:9%">@person.Gender</td>
                    <td style="width:10%">@person.Country</td>
                    <td style="width:10%">@person.Address</td>
                    <td style="width:20%">@person.ReceiveNewsLetters</td>
                    <td style="width:20%">
                        <a asp-controller="Persons" asp-action="Edit" asp-route-personID="@person.PersonID">Edit</a>
                        <a asp-controller="Persons" asp-action="Delete" asp-route-personID="@person.PersonID">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</form>